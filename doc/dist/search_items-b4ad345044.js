searchNodes=[{"doc":"Documentation for Elxr.","ref":"Elxr.html","title":"Elxr","type":"module"},{"doc":"Documentation for Api_response. Make a api_response module, it will receive an tuple, the first item will be an atom (:ok and :error) and the other one will be a map (we don&#39;t need to care about the second item). The idea is very similar to the previous one, we need to create 4 function (if and else, cond, case, functions ) that returns the same response, for example: ApiResponse.handle_response_1({:ok, %{blabla}}) -&gt;&quot;Ok&quot; ApiResponse.handle_response_1({:error, %{blabla}}) -&gt;&quot;Error&quot; ApiResponse.handle_response_1({:what, %{blabla}}) -&gt; :no_match_message_error","ref":"Elxr.Api_response.html","title":"Elxr.Api_response","type":"module"},{"doc":"Examples iex(1)&gt; Api_response.caseDo({:ok, &quot;hola&quot;}) &quot;Ok&quot; iex(1)&gt; Api_response.caseDo({:error, &quot;hola&quot;}) &quot;Error&quot; iex(1)&gt; Api_response.caseDo({:adfd, &quot;hola&quot;}) &quot;Se obtuvo una respuesta de estado no esperada&quot;","ref":"Elxr.Api_response.html#caseDo/1","title":"Elxr.Api_response.caseDo/1","type":"function"},{"doc":"Examples iex(1)&gt; Api_response.ifElse({:ok, &quot;hola&quot;}) &quot;Ok&quot; iex(1)&gt; Api_response.condDo({:error, &quot;hola&quot;}) &quot;Error&quot; iex(1)&gt; Api_response.condDo({:errore, &quot;hola&quot;}) &quot;Se obtuvo una respuesta de estado no esperada&quot;","ref":"Elxr.Api_response.html#condDo/1","title":"Elxr.Api_response.condDo/1","type":"function"},{"doc":"Examples iex(1)&gt; Api_response.func({:ok, &quot;hola&quot;}) &quot;Ok&quot; iex(1)&gt; Api_response.func({:error, &quot;hola&quot;}) &quot;Error&quot; iex(1)&gt; Api_response.func({:lfdmg, &quot;hola&quot;}) &quot;Se obtuvo una respuesta de estado no esperada&quot;","ref":"Elxr.Api_response.html#func/1","title":"Elxr.Api_response.func/1","type":"function"},{"doc":"Examples iex(1)&gt; Api_response.ifElse({:ok, &quot;hola&quot;}) &quot;Ok&quot; iex(1)&gt; Api_response.ifElse({:error, &quot;hola&quot;}) &quot;Error&quot; iex(1)&gt; Api_response.ifElse({:adae, &quot;hola&quot;}) &quot;Se obtuvo una respuesta de estado no esperada&quot;","ref":"Elxr.Api_response.html#ifElse/1","title":"Elxr.Api_response.ifElse/1","type":"function"},{"doc":"Make a fizz_buzz module and write a function called fuzzle that takes three arguments. If the first two are zero, return “FizzBuzz”. If the first is zero, return “Fizz”. If the second is zero return “Buzz”. Otherwise return the third argument. You don&#39;t need to use recursion here, create 2 methods, one using cond do, and the other one case do.","ref":"Elxr.Fizz_buzz.html","title":"Elxr.Fizz_buzz","type":"module"},{"doc":"iex(4)&gt; Elxr.Fizz_buzz.fuzzle(0, 0, 3) &quot;FizzBuzz&quot;","ref":"Elxr.Fizz_buzz.html#fuzzle/3","title":"Elxr.Fizz_buzz.fuzzle/3","type":"function"},{"doc":"iex(3)&gt; Elxr.Fizz_buzz.fuzzle2([1, 0, 3]) &quot;Buzz&quot;","ref":"Elxr.Fizz_buzz.html#fuzzle2/1","title":"Elxr.Fizz_buzz.fuzzle2/1","type":"function"}]